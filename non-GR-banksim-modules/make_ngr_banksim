#!/home/narola.bharatbhai/src/npycbc/bin/python

import os
from glue.ligolw import utils as ligolw_utils
from glue.ligolw.ligolw import LIGOLWContentHandler
from glue.ligolw import table, lsctables
from optparse import OptionParser

# This script will write files that are to be submitted to the condor with a suitable executable. These files are for the 'argument' of the .sub file.  

class mycontenthandler(LIGOLWContentHandler):
    pass
lsctables.use_in(mycontenthandler)

parser = OptionParser(usage = 'write the argument files and .sub for banksim')


parser.add_option('--injection-file', help = 'Injection file in .xml format', metavar="FILE")
parser.add_option('--bank-file', help = 'Template bank file in .hdf format', metavar="FILE")
parser.add_option('--asd-file', help = 'ASD file ASCII format', metavar="FILE")
parser.add_option('--output-dir', help = 'must give the full address of the directory not the relative address')
parser.add_option('--include-nonGR-params', help = 'By default false. True if you want to consider nonGR params, False otherwise.', default=False)


opts, args = parser.parse_args()

injection_file = opts.injection_file
bank_file = opts.bank_file
asd_file = opts.asd_file
output_dir = opts.output_dir

indoc = ligolw_utils.load_filename(injection_file, False, contenthandler=mycontenthandler)
injection_table = table.get_table(indoc, lsctables.SimInspiralTable.tableName)

os.makedirs('{}/submitdir'.format(output_dir))
os.makedirs('{}/match_files'.format(output_dir))
os.makedirs('{}/err'.format(output_dir))
os.makedirs('{}/out'.format(output_dir))

i = 0

for i in range(len(injection_table)):
    script = '/home/narola.bharatbhai/src/npycbc/bin/single_injection_match'
    arguments = ' --injection-file {} --bank-file {} --asd-file {} --injection-id {} --output-dir {}/match_files --include-nonGR-params {}'.format(injection_file, bank_file, asd_file, i, output_dir, opts.include_nonGR_params)
    total = script + arguments
    file = open('{}/submitdir/run{}'.format(output_dir, i), 'w+')
    file.write(total)


dot_subfile = open('output/condor_submit_file.sub', 'w')

string = '''executable = /bin/sh
arguments = {}/submitdir/run$(Process)
universe = vanilla
accounting_group = ligo.sim.o2.cbc.explore.test
log = log.GRvsGR
request_memory = 2048
error = {}/err/error$(Process)
output = {}/out/output$(Process)
should_transfer_files = yes
transfer_input_files = {}/submitdir/run$(Process)
queue {}'''.format(output_dir, output_dir, output_dir, output_dir, len(injection_table))

dot_subfile.write(string)