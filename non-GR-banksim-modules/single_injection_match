#!/home/narola.bharatbhai/src/npycbc/bin/python
import numpy as np
from glue.ligolw import utils as ligolw_utils
from glue.ligolw.ligolw import LIGOLWContentHandler
from glue.ligolw import table, lsctables
import h5py as h5
import pickle as pkl
from ngrBanksim.read_params import read_gr_params, read_all_params
from ngrBanksim.gr_vs_ngr import CalMatch
from optparse import OptionParser

class mycontenthandler(LIGOLWContentHandler):
    pass
lsctables.use_in(mycontenthandler)

#parser = argparse.ArgumentParser(description = 'Calculates match for the given injection ID with the entire template bank')
parser = OptionParser(usage = 'Calculates match for the given injection ID with the entire template bank')


parser.add_option('--injection-file', help = 'Injection file in .xml format', metavar="FILE")
parser.add_option('--bank-file', help = 'Template bank file in .hdf format', metavar="FILE")
parser.add_option('--asd-file', help = 'ASD file ASCII format', metavar="FILE")
parser.add_option('--injection-id', help = 'Injection ID')
parser.add_option('--include-nonGR-params', help = 'True if you want to consider nonGR params, False otherwise')

parser.add_option('--output-dir')
opts, args = parser.parse_args()

injection_file = opts.injection_file #'HL-INJECTIONS_33-1126137617-1209600.xml'
bank_file = opts.bank_file
bank_file = h5.File(bank_file, 'r') #h5.File('O1_bank_small_mass_pycbc.hdf', 'r')
asd_file = np.load(opts.asd_file) #np.load('asd14Feb.npy')
i = int(opts.injection_id)
output_dir = opts.output_dir

indoc = ligolw_utils.load_filename(injection_file, False, contenthandler=mycontenthandler)
injection_table = table.get_table(indoc, lsctables.SimInspiralTable.tableName)



inj_params = np.array([injection_table[i].__getattribute__('mass1'), \
                       injection_table[i].__getattribute__('mass2'), \
                       injection_table[i].__getattribute__('spin1z'), \
                       injection_table[i].__getattribute__('spin2z'), \
                       injection_table[i].__getattribute__('alpha1'), \
                       injection_table[i].__getattribute__('alpha2'), \
                       injection_table[i].__getattribute__('alpha4'), \
                       injection_table[i].__getattribute__('alpha5') ])
                       
           
print inj_params

if opts.include_nonGR_params:
    inj_params = read_all_params(inj_params)
    print 'nonGR params turned on'
    
elif not opts.include_nonGR_params:
    inj_params = read_gr_params(inj_params)
    print 'nonGR params truned off'

j = 0
match = np.array([])

for j in range(len(bank_file['mass1'][:50])):
    template_params = np.array([float(bank_file['mass1'][j]), \
                               float(bank_file['mass2'][j]), \
                               float(bank_file['spin1z'][j]), \
                               float(bank_file['spin2z'][j])])
    
    template_params = read_gr_params(template_params)
    match = np.append(match, CalMatch(template_params, inj_params, asd_file))

print 'Job Completed'
pkl.dump(match, open('{}/match{}.pkl'.format(output_dir, i), 'wb') ,pkl.HIGHEST_PROTOCOL)